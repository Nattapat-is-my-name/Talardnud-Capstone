/* tslint:disable */
/* eslint-disable */
/**
 * Talardnad API
 * API user management Server by Fiber | Doc by Swagger.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: admin@subalgo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DtosBookingDtos
 */
export interface DtosBookingDtos {
    /**
     * 
     * @type {Array<string>}
     * @memberof DtosBookingDtos
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DtosBookingRequest
 */
export interface DtosBookingRequest {
    /**
     * 
     * @type {string}
     * @memberof DtosBookingRequest
     */
    'booking_date': string;
    /**
     * Required, selected by the user
     * @type {string}
     * @memberof DtosBookingRequest
     */
    'market_id': string;
    /**
     * 
     * @type {EntitiesMethod}
     * @memberof DtosBookingRequest
     */
    'method': EntitiesMethod;
    /**
     * 
     * @type {number}
     * @memberof DtosBookingRequest
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof DtosBookingRequest
     */
    'slot_id'?: string;
    /**
     * Required, selected by the user
     * @type {string}
     * @memberof DtosBookingRequest
     */
    'vendor_id': string;
}


/**
 * 
 * @export
 * @interface DtosBookingResponse
 */
export interface DtosBookingResponse {
    /**
     * 
     * @type {string}
     * @memberof DtosBookingResponse
     */
    'bookingDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosBookingResponse
     */
    'expiresAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosBookingResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosBookingResponse
     */
    'image'?: string;
    /**
     * 
     * @type {EntitiesMethod}
     * @memberof DtosBookingResponse
     */
    'method'?: EntitiesMethod;
    /**
     * 
     * @type {number}
     * @memberof DtosBookingResponse
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof DtosBookingResponse
     */
    'slotId'?: string;
    /**
     * 
     * @type {EntitiesBookingStatus}
     * @memberof DtosBookingResponse
     */
    'status'?: EntitiesBookingStatus;
    /**
     * 
     * @type {string}
     * @memberof DtosBookingResponse
     */
    'transactionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosBookingResponse
     */
    'vendorId'?: string;
}


/**
 * 
 * @export
 * @interface DtosDateRange
 */
export interface DtosDateRange {
    /**
     * 
     * @type {string}
     * @memberof DtosDateRange
     */
    'end_date': string;
    /**
     * 
     * @type {string}
     * @memberof DtosDateRange
     */
    'start_date': string;
}
/**
 * 
 * @export
 * @interface DtosGetListMarketResponse
 */
export interface DtosGetListMarketResponse {
    /**
     * 
     * @type {Array<DtosMarketResponse>}
     * @memberof DtosGetListMarketResponse
     */
    'market'?: Array<DtosMarketResponse>;
}
/**
 * 
 * @export
 * @interface DtosGetUserResponse
 */
export interface DtosGetUserResponse {
    /**
     * 
     * @type {DtosBookingDtos}
     * @memberof DtosGetUserResponse
     */
    'bookings'?: DtosBookingDtos;
    /**
     * 
     * @type {string}
     * @memberof DtosGetUserResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosGetUserResponse
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosGetUserResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosGetUserResponse
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosGetUserResponse
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface DtosMarketProviderRequest
 */
export interface DtosMarketProviderRequest {
    /**
     * Required, email address of the provider
     * @type {string}
     * @memberof DtosMarketProviderRequest
     */
    'email': string;
    /**
     * Required, password of the provider
     * @type {string}
     * @memberof DtosMarketProviderRequest
     */
    'password': string;
    /**
     * Required, phone number of the provider
     * @type {string}
     * @memberof DtosMarketProviderRequest
     */
    'phone': string;
    /**
     * Required, username of the provider
     * @type {string}
     * @memberof DtosMarketProviderRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface DtosMarketRequest
 */
export interface DtosMarketRequest {
    /**
     * Required, address of the market
     * @type {string}
     * @memberof DtosMarketRequest
     */
    'address': string;
    /**
     * Required, closing time in HH:mm format
     * @type {string}
     * @memberof DtosMarketRequest
     */
    'close_time': string;
    /**
     * Optional, description of the market
     * @type {string}
     * @memberof DtosMarketRequest
     */
    'description'?: string;
    /**
     * Optional, URL or path to the market image
     * @type {string}
     * @memberof DtosMarketRequest
     */
    'image'?: string;
    /**
     * Optional, latitude coordinate
     * @type {string}
     * @memberof DtosMarketRequest
     */
    'latitude'?: string;
    /**
     * Optional, longitude coordinate
     * @type {string}
     * @memberof DtosMarketRequest
     */
    'longitude'?: string;
    /**
     * Required, name of the market
     * @type {string}
     * @memberof DtosMarketRequest
     */
    'name': string;
    /**
     * Required, opening time in HH:mm format
     * @type {string}
     * @memberof DtosMarketRequest
     */
    'open_time': string;
    /**
     * Required, UUID of the provider
     * @type {string}
     * @memberof DtosMarketRequest
     */
    'provider_id': string;
}
/**
 * 
 * @export
 * @interface DtosMarketResponse
 */
export interface DtosMarketResponse {
    /**
     * the data to be returned
     * @type {Array<EntitiesMarket>}
     * @memberof DtosMarketResponse
     */
    'data'?: Array<EntitiesMarket>;
    /**
     * message to accompany the response
     * @type {string}
     * @memberof DtosMarketResponse
     */
    'message'?: string;
    /**
     * success or error
     * @type {string}
     * @memberof DtosMarketResponse
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface DtosProviderLoginRequest
 */
export interface DtosProviderLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof DtosProviderLoginRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof DtosProviderLoginRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface DtosProviderLoginResponse
 */
export interface DtosProviderLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof DtosProviderLoginResponse
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosProviderLoginResponse
     */
    'provider_id'?: string;
}
/**
 * 
 * @export
 * @interface DtosRegisterRequest
 */
export interface DtosRegisterRequest {
    /**
     * Required, must be a valid email format
     * @type {string}
     * @memberof DtosRegisterRequest
     */
    'email': string;
    /**
     * Required, min 8 characters for password
     * @type {string}
     * @memberof DtosRegisterRequest
     */
    'password': string;
    /**
     * Required, adjust based on the expected format=
     * @type {string}
     * @memberof DtosRegisterRequest
     */
    'phone_number': string;
    /**
     * Required, min 3, max 50 characters
     * @type {string}
     * @memberof DtosRegisterRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface DtosRegisterResponse
 */
export interface DtosRegisterResponse {
    /**
     * 
     * @type {string}
     * @memberof DtosRegisterResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosRegisterResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosRegisterResponse
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof DtosRegisterResponse
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface DtosSlotData
 */
export interface DtosSlotData {
    /**
     * 
     * @type {EntitiesCategory}
     * @memberof DtosSlotData
     */
    'category': EntitiesCategory;
    /**
     * 
     * @type {number}
     * @memberof DtosSlotData
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof DtosSlotData
     */
    'slot_id': string;
    /**
     * 
     * @type {EntitiesSlotStatus}
     * @memberof DtosSlotData
     */
    'status': EntitiesSlotStatus;
}


/**
 * 
 * @export
 * @interface DtosSlotGenerationRequest
 */
export interface DtosSlotGenerationRequest {
    /**
     * 
     * @type {DtosDateRange}
     * @memberof DtosSlotGenerationRequest
     */
    'date_range': DtosDateRange;
    /**
     * 
     * @type {string}
     * @memberof DtosSlotGenerationRequest
     */
    'market_id': string;
    /**
     * 
     * @type {Array<DtosSlotData>}
     * @memberof DtosSlotGenerationRequest
     */
    'slots': Array<DtosSlotData>;
}
/**
 * 
 * @export
 * @interface EntitiesBooking
 */
export interface EntitiesBooking {
    /**
     * Changed from Date to BookingDate
     * @type {string}
     * @memberof EntitiesBooking
     */
    'booking_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesBooking
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesBooking
     */
    'expires_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesBooking
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesBooking
     */
    'market_id'?: string;
    /**
     * 
     * @type {EntitiesMethod}
     * @memberof EntitiesBooking
     */
    'method'?: EntitiesMethod;
    /**
     * 
     * @type {EntitiesPayment}
     * @memberof EntitiesBooking
     */
    'payment'?: EntitiesPayment;
    /**
     * 
     * @type {number}
     * @memberof EntitiesBooking
     */
    'price'?: number;
    /**
     * 
     * @type {EntitiesSlot}
     * @memberof EntitiesBooking
     */
    'slot'?: EntitiesSlot;
    /**
     * 
     * @type {string}
     * @memberof EntitiesBooking
     */
    'slot_id'?: string;
    /**
     * 
     * @type {EntitiesBookingStatus}
     * @memberof EntitiesBooking
     */
    'status'?: EntitiesBookingStatus;
    /**
     * 
     * @type {string}
     * @memberof EntitiesBooking
     */
    'updated_at'?: string;
    /**
     * 
     * @type {EntitiesVendor}
     * @memberof EntitiesBooking
     */
    'vendor'?: EntitiesVendor;
    /**
     * 
     * @type {string}
     * @memberof EntitiesBooking
     */
    'vendor_id'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const EntitiesBookingStatus = {
    StatusPending: 'pending',
    StatusCancelled: 'cancelled',
    StatusCompleted: 'completed'
} as const;

export type EntitiesBookingStatus = typeof EntitiesBookingStatus[keyof typeof EntitiesBookingStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const EntitiesCategory = {
    CategoryClothes: 'clothes',
    CategoryFood: 'food',
    CategoryCrafts: 'crafts',
    CategoryProduce: 'produce',
    CategoryElectronics: 'electronics',
    CategoryServices: 'services',
    CategoryOther: 'other'
} as const;

export type EntitiesCategory = typeof EntitiesCategory[keyof typeof EntitiesCategory];


/**
 * 
 * @export
 * @interface EntitiesLoginRequest
 */
export interface EntitiesLoginRequest {
    /**
     * Password must be provided and at least 8 characters long
     * @type {string}
     * @memberof EntitiesLoginRequest
     */
    'password': string;
    /**
     * Accepts either username or email
     * @type {string}
     * @memberof EntitiesLoginRequest
     */
    'username_or_email': string;
}
/**
 * 
 * @export
 * @interface EntitiesLoginResponse
 */
export interface EntitiesLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof EntitiesLoginResponse
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesLoginResponse
     */
    'vendor_id'?: string;
}
/**
 * 
 * @export
 * @interface EntitiesMarket
 */
export interface EntitiesMarket {
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'close_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'latitude'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'longitude'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'open_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'phone'?: string;
    /**
     * 
     * @type {EntitiesMarketProvider}
     * @memberof EntitiesMarket
     */
    'provider'?: EntitiesMarketProvider;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'provider_id'?: string;
    /**
     * 
     * @type {Array<EntitiesSlot>}
     * @memberof EntitiesMarket
     */
    'slots'?: Array<EntitiesSlot>;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarket
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface EntitiesMarketProvider
 */
export interface EntitiesMarketProvider {
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarketProvider
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarketProvider
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarketProvider
     */
    'id'?: string;
    /**
     * 
     * @type {Array<EntitiesMarket>}
     * @memberof EntitiesMarketProvider
     */
    'markets'?: Array<EntitiesMarket>;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarketProvider
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarketProvider
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarketProvider
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesMarketProvider
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EntitiesMethod = {
    MethodPromptPay: 'PromptPay'
} as const;

export type EntitiesMethod = typeof EntitiesMethod[keyof typeof EntitiesMethod];


/**
 * 
 * @export
 * @interface EntitiesPayment
 */
export interface EntitiesPayment {
    /**
     * 
     * @type {EntitiesBooking}
     * @memberof EntitiesPayment
     */
    'booking'?: EntitiesBooking;
    /**
     * 
     * @type {string}
     * @memberof EntitiesPayment
     */
    'booking_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesPayment
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesPayment
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesPayment
     */
    'expires_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesPayment
     */
    'id'?: string;
    /**
     * 
     * @type {EntitiesMethod}
     * @memberof EntitiesPayment
     */
    'method'?: EntitiesMethod;
    /**
     * 
     * @type {string}
     * @memberof EntitiesPayment
     */
    'payment_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof EntitiesPayment
     */
    'price'?: number;
    /**
     * 
     * @type {EntitiesPaymentStatus}
     * @memberof EntitiesPayment
     */
    'status'?: EntitiesPaymentStatus;
    /**
     * 
     * @type {EntitiesTransaction}
     * @memberof EntitiesPayment
     */
    'transactions'?: EntitiesTransaction;
    /**
     * 
     * @type {string}
     * @memberof EntitiesPayment
     */
    'updated_at'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const EntitiesPaymentStatus = {
    PaymentPending: 'pending',
    PaymentCompleted: 'completed',
    PaymentFailed: 'failed'
} as const;

export type EntitiesPaymentStatus = typeof EntitiesPaymentStatus[keyof typeof EntitiesPaymentStatus];


/**
 * 
 * @export
 * @interface EntitiesSlot
 */
export interface EntitiesSlot {
    /**
     * 
     * @type {Array<EntitiesBooking>}
     * @memberof EntitiesSlot
     */
    'booking'?: Array<EntitiesBooking>;
    /**
     * 
     * @type {EntitiesCategory}
     * @memberof EntitiesSlot
     */
    'category'?: EntitiesCategory;
    /**
     * 
     * @type {string}
     * @memberof EntitiesSlot
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesSlot
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesSlot
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesSlot
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesSlot
     */
    'market_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesSlot
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof EntitiesSlot
     */
    'price'?: number;
    /**
     * 
     * @type {EntitiesSlotStatus}
     * @memberof EntitiesSlot
     */
    'status'?: EntitiesSlotStatus;
    /**
     * 
     * @type {string}
     * @memberof EntitiesSlot
     */
    'updated_at'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const EntitiesSlotStatus = {
    StatusAvailable: 'available',
    StatusBooked: 'booked',
    StatusMaintenance: 'maintenance'
} as const;

export type EntitiesSlotStatus = typeof EntitiesSlotStatus[keyof typeof EntitiesSlotStatus];


/**
 * 
 * @export
 * @interface EntitiesTransaction
 */
export interface EntitiesTransaction {
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'expires_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'method'?: string;
    /**
     * 
     * @type {EntitiesPayment}
     * @memberof EntitiesTransaction
     */
    'payment'?: EntitiesPayment;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'payment_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof EntitiesTransaction
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'ref1'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'ref2'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'ref3'?: string;
    /**
     * 
     * @type {EntitiesTransactionStatus}
     * @memberof EntitiesTransaction
     */
    'status'?: EntitiesTransactionStatus;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'transaction_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'transaction_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesTransaction
     */
    'updated_at'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const EntitiesTransactionStatus = {
    TransactionPending: 'pending',
    TransactionCompleted: 'completed',
    TransactionFailed: 'failed'
} as const;

export type EntitiesTransactionStatus = typeof EntitiesTransactionStatus[keyof typeof EntitiesTransactionStatus];


/**
 * 
 * @export
 * @interface EntitiesVendor
 */
export interface EntitiesVendor {
    /**
     * 
     * @type {Array<EntitiesBooking>}
     * @memberof EntitiesVendor
     */
    'bookings'?: Array<EntitiesBooking>;
    /**
     * 
     * @type {string}
     * @memberof EntitiesVendor
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesVendor
     */
    'deleted_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesVendor
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesVendor
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesVendor
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesVendor
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesVendor
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesVendor
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesVendor
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitiesVendor
     */
    'username'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Login with the provided credentials
         * @summary Login
         * @param {EntitiesLoginRequest} login Login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (login: EntitiesLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('authLoginPost', 'login', login)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(login, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login for market providers with the provided credentials
         * @summary Provider Login
         * @param {DtosProviderLoginRequest} login Provider Login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderLoginPost: async (login: DtosProviderLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('authProviderLoginPost', 'login', login)
            const localVarPath = `/auth/provider/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(login, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new market provider with the provided data
         * @summary Register Provider
         * @param {DtosMarketProviderRequest} register Register provider request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderRegisterPost: async (register: DtosMarketProviderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'register' is not null or undefined
            assertParamExists('authProviderRegisterPost', 'register', register)
            const localVarPath = `/auth/provider/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(register, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new user with the provided data
         * @summary Register
         * @param {DtosRegisterRequest} register Register request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost: async (register: DtosRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'register' is not null or undefined
            assertParamExists('authRegisterPost', 'register', register)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(register, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Login with the provided credentials
         * @summary Login
         * @param {EntitiesLoginRequest} login Login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(login: EntitiesLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitiesLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(login, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login for market providers with the provided credentials
         * @summary Provider Login
         * @param {DtosProviderLoginRequest} login Provider Login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProviderLoginPost(login: DtosProviderLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosProviderLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authProviderLoginPost(login, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authProviderLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Register a new market provider with the provided data
         * @summary Register Provider
         * @param {DtosMarketProviderRequest} register Register provider request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProviderRegisterPost(register: DtosMarketProviderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitiesMarketProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authProviderRegisterPost(register, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authProviderRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Register a new user with the provided data
         * @summary Register
         * @param {DtosRegisterRequest} register Register request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterPost(register: DtosRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosRegisterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterPost(register, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Login with the provided credentials
         * @summary Login
         * @param {EntitiesLoginRequest} login Login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(login: EntitiesLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntitiesLoginResponse> {
            return localVarFp.authLoginPost(login, options).then((request) => request(axios, basePath));
        },
        /**
         * Login for market providers with the provided credentials
         * @summary Provider Login
         * @param {DtosProviderLoginRequest} login Provider Login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderLoginPost(login: DtosProviderLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<DtosProviderLoginResponse> {
            return localVarFp.authProviderLoginPost(login, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new market provider with the provided data
         * @summary Register Provider
         * @param {DtosMarketProviderRequest} register Register provider request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderRegisterPost(register: DtosMarketProviderRequest, options?: RawAxiosRequestConfig): AxiosPromise<EntitiesMarketProvider> {
            return localVarFp.authProviderRegisterPost(register, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new user with the provided data
         * @summary Register
         * @param {DtosRegisterRequest} register Register request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost(register: DtosRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<DtosRegisterResponse> {
            return localVarFp.authRegisterPost(register, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Login with the provided credentials
     * @summary Login
     * @param {EntitiesLoginRequest} login Login data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPost(login: EntitiesLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPost(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login for market providers with the provided credentials
     * @summary Provider Login
     * @param {DtosProviderLoginRequest} login Provider Login data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authProviderLoginPost(login: DtosProviderLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authProviderLoginPost(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a new market provider with the provided data
     * @summary Register Provider
     * @param {DtosMarketProviderRequest} register Register provider request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authProviderRegisterPost(register: DtosMarketProviderRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authProviderRegisterPost(register, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a new user with the provided data
     * @summary Register
     * @param {DtosRegisterRequest} register Register request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegisterPost(register: DtosRegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegisterPost(register, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookingsApi - axios parameter creator
 * @export
 */
export const BookingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new booking with the provided data
         * @summary Create a booking
         * @param {DtosBookingRequest} booking Booking data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsCreatePost: async (booking: DtosBookingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'booking' is not null or undefined
            assertParamExists('bookingsCreatePost', 'booking', booking)
            const localVarPath = `/bookings/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(booking, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a booking with the provided ID
         * @summary Get a booking
         * @param {string} id Booking ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsGetIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('bookingsGetIdGet', 'id', id)
            const localVarPath = `/bookings/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingsApi - functional programming interface
 * @export
 */
export const BookingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new booking with the provided data
         * @summary Create a booking
         * @param {DtosBookingRequest} booking Booking data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookingsCreatePost(booking: DtosBookingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosBookingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookingsCreatePost(booking, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.bookingsCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a booking with the provided ID
         * @summary Get a booking
         * @param {string} id Booking ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookingsGetIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosBookingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookingsGetIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingsApi.bookingsGetIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookingsApi - factory interface
 * @export
 */
export const BookingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookingsApiFp(configuration)
    return {
        /**
         * Create a new booking with the provided data
         * @summary Create a booking
         * @param {DtosBookingRequest} booking Booking data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsCreatePost(booking: DtosBookingRequest, options?: RawAxiosRequestConfig): AxiosPromise<DtosBookingResponse> {
            return localVarFp.bookingsCreatePost(booking, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a booking with the provided ID
         * @summary Get a booking
         * @param {string} id Booking ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookingsGetIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DtosBookingResponse> {
            return localVarFp.bookingsGetIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookingsApi - object-oriented interface
 * @export
 * @class BookingsApi
 * @extends {BaseAPI}
 */
export class BookingsApi extends BaseAPI {
    /**
     * Create a new booking with the provided data
     * @summary Create a booking
     * @param {DtosBookingRequest} booking Booking data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public bookingsCreatePost(booking: DtosBookingRequest, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).bookingsCreatePost(booking, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a booking with the provided ID
     * @summary Get a booking
     * @param {string} id Booking ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public bookingsGetIdGet(id: string, options?: RawAxiosRequestConfig) {
        return BookingsApiFp(this.configuration).bookingsGetIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MarketApi - axios parameter creator
 * @export
 */
export const MarketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new market
         * @summary Create a new market
         * @param {DtosMarketRequest} market Market object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsCreatePost: async (market: DtosMarketRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'market' is not null or undefined
            assertParamExists('marketsCreatePost', 'market', market)
            const localVarPath = `/markets/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(market, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all markets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsGetGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/markets/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a market by ID
         * @summary Get a market by ID
         * @param {string} id Market ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsGetIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marketsGetIdGet', 'id', id)
            const localVarPath = `/markets/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a market by Provider ID
         * @summary Get a market by Provider ID
         * @param {string} id Provider ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsProviderGetIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marketsProviderGetIdGet', 'id', id)
            const localVarPath = `/markets/provider/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketApi - functional programming interface
 * @export
 */
export const MarketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new market
         * @summary Create a new market
         * @param {DtosMarketRequest} market Market object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketsCreatePost(market: DtosMarketRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosMarketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketsCreatePost(market, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketApi.marketsCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all markets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketsGetGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosGetListMarketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketsGetGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketApi.marketsGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a market by ID
         * @summary Get a market by ID
         * @param {string} id Market ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketsGetIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosMarketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketsGetIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketApi.marketsGetIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a market by Provider ID
         * @summary Get a market by Provider ID
         * @param {string} id Provider ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketsProviderGetIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosMarketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketsProviderGetIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketApi.marketsProviderGetIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MarketApi - factory interface
 * @export
 */
export const MarketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketApiFp(configuration)
    return {
        /**
         * Create a new market
         * @summary Create a new market
         * @param {DtosMarketRequest} market Market object that needs to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsCreatePost(market: DtosMarketRequest, options?: RawAxiosRequestConfig): AxiosPromise<DtosMarketResponse> {
            return localVarFp.marketsCreatePost(market, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all markets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsGetGet(options?: RawAxiosRequestConfig): AxiosPromise<DtosGetListMarketResponse> {
            return localVarFp.marketsGetGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a market by ID
         * @summary Get a market by ID
         * @param {string} id Market ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsGetIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DtosMarketResponse> {
            return localVarFp.marketsGetIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a market by Provider ID
         * @summary Get a market by Provider ID
         * @param {string} id Provider ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsProviderGetIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DtosMarketResponse> {
            return localVarFp.marketsProviderGetIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketApi - object-oriented interface
 * @export
 * @class MarketApi
 * @extends {BaseAPI}
 */
export class MarketApi extends BaseAPI {
    /**
     * Create a new market
     * @summary Create a new market
     * @param {DtosMarketRequest} market Market object that needs to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketApi
     */
    public marketsCreatePost(market: DtosMarketRequest, options?: RawAxiosRequestConfig) {
        return MarketApiFp(this.configuration).marketsCreatePost(market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all markets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketApi
     */
    public marketsGetGet(options?: RawAxiosRequestConfig) {
        return MarketApiFp(this.configuration).marketsGetGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a market by ID
     * @summary Get a market by ID
     * @param {string} id Market ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketApi
     */
    public marketsGetIdGet(id: string, options?: RawAxiosRequestConfig) {
        return MarketApiFp(this.configuration).marketsGetIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a market by Provider ID
     * @summary Get a market by Provider ID
     * @param {string} id Provider ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketApi
     */
    public marketsProviderGetIdGet(id: string, options?: RawAxiosRequestConfig) {
        return MarketApiFp(this.configuration).marketsProviderGetIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SlotsApi - axios parameter creator
 * @export
 */
export const SlotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new slot with the provided data
         * @summary Create a slot
         * @param {DtosSlotGenerationRequest} slot Slot data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slotsCreatePost: async (slot: DtosSlotGenerationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slot' is not null or undefined
            assertParamExists('slotsCreatePost', 'slot', slot)
            const localVarPath = `/slots/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(slot, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all slots
         * @summary Get all slots
         * @param {string} id Market ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slotsGetIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('slotsGetIdGet', 'id', id)
            const localVarPath = `/slots/get/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get slots by date
         * @summary Get slots by date
         * @param {string} marketID MarketID
         * @param {string} date Date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slotsMarketsMarketIDDateDateGet: async (marketID: string, date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketID' is not null or undefined
            assertParamExists('slotsMarketsMarketIDDateDateGet', 'marketID', marketID)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('slotsMarketsMarketIDDateDateGet', 'date', date)
            const localVarPath = `/slots/markets/{marketID}/date/{date}`
                .replace(`{${"marketID"}}`, encodeURIComponent(String(marketID)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SlotsApi - functional programming interface
 * @export
 */
export const SlotsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SlotsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new slot with the provided data
         * @summary Create a slot
         * @param {DtosSlotGenerationRequest} slot Slot data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async slotsCreatePost(slot: DtosSlotGenerationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntitiesSlot>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.slotsCreatePost(slot, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SlotsApi.slotsCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all slots
         * @summary Get all slots
         * @param {string} id Market ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async slotsGetIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitiesSlot>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.slotsGetIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SlotsApi.slotsGetIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get slots by date
         * @summary Get slots by date
         * @param {string} marketID MarketID
         * @param {string} date Date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async slotsMarketsMarketIDDateDateGet(marketID: string, date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntitiesSlot>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.slotsMarketsMarketIDDateDateGet(marketID, date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SlotsApi.slotsMarketsMarketIDDateDateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SlotsApi - factory interface
 * @export
 */
export const SlotsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SlotsApiFp(configuration)
    return {
        /**
         * Create a new slot with the provided data
         * @summary Create a slot
         * @param {DtosSlotGenerationRequest} slot Slot data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slotsCreatePost(slot: DtosSlotGenerationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<EntitiesSlot>> {
            return localVarFp.slotsCreatePost(slot, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all slots
         * @summary Get all slots
         * @param {string} id Market ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slotsGetIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<EntitiesSlot> {
            return localVarFp.slotsGetIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get slots by date
         * @summary Get slots by date
         * @param {string} marketID MarketID
         * @param {string} date Date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slotsMarketsMarketIDDateDateGet(marketID: string, date: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<EntitiesSlot>> {
            return localVarFp.slotsMarketsMarketIDDateDateGet(marketID, date, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SlotsApi - object-oriented interface
 * @export
 * @class SlotsApi
 * @extends {BaseAPI}
 */
export class SlotsApi extends BaseAPI {
    /**
     * Create a new slot with the provided data
     * @summary Create a slot
     * @param {DtosSlotGenerationRequest} slot Slot data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlotsApi
     */
    public slotsCreatePost(slot: DtosSlotGenerationRequest, options?: RawAxiosRequestConfig) {
        return SlotsApiFp(this.configuration).slotsCreatePost(slot, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all slots
     * @summary Get all slots
     * @param {string} id Market ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlotsApi
     */
    public slotsGetIdGet(id: string, options?: RawAxiosRequestConfig) {
        return SlotsApiFp(this.configuration).slotsGetIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get slots by date
     * @summary Get slots by date
     * @param {string} marketID MarketID
     * @param {string} date Date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlotsApi
     */
    public slotsMarketsMarketIDDateDateGet(marketID: string, date: string, options?: RawAxiosRequestConfig) {
        return SlotsApiFp(this.configuration).slotsMarketsMarketIDDateDateGet(marketID, date, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a user with the provided ID
         * @summary Delete a user
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdDelete', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user with the provided ID
         * @summary Get a user by ID
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a user with the provided ID
         * @summary Delete a user
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a user with the provided ID
         * @summary Get a user by ID
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtosGetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Delete a user with the provided ID
         * @summary Delete a user
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.usersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user with the provided ID
         * @summary Get a user by ID
         * @param {string} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DtosGetUserResponse> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Delete a user with the provided ID
     * @summary Delete a user
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a user with the provided ID
     * @summary Get a user by ID
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



